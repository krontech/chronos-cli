/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_cam_video_MARSHAL_H__
#define __dbus_glib_marshal_cam_video_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_schar (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* BOOLEAN:POINTER,POINTER */
extern void dbus_glib_marshal_cam_video_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                  GValue       *return_value,
                                                                  guint         n_param_values,
                                                                  const GValue *param_values,
                                                                  gpointer      invocation_hint,
                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_cam_video_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                      GValue       *return_value G_GNUC_UNUSED,
                                                      guint         n_param_values,
                                                      const GValue *param_values,
                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                      gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER) (gpointer     data1,
                                                             gpointer     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  GMarshalFunc_BOOLEAN__POINTER_POINTER callback;
  GCClosure *cc = (GCClosure*) closure;
  gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:BOXED,POINTER,POINTER */
extern void dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER (GClosure     *closure,
                                                                        GValue       *return_value,
                                                                        guint         n_param_values,
                                                                        const GValue *param_values,
                                                                        gpointer      invocation_hint,
                                                                        gpointer      marshal_data);
void
dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER (GClosure     *closure,
                                                            GValue       *return_value G_GNUC_UNUSED,
                                                            guint         n_param_values,
                                                            const GValue *param_values,
                                                            gpointer      invocation_hint G_GNUC_UNUSED,
                                                            gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__BOXED_POINTER_POINTER) (gpointer     data1,
                                                                   gpointer     arg_1,
                                                                   gpointer     arg_2,
                                                                   gpointer     arg_3,
                                                                   gpointer     data2);
  GMarshalFunc_BOOLEAN__BOXED_POINTER_POINTER callback;
  GCClosure *cc = (GCClosure*) closure;
  gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__BOXED_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_boxed (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_cam_video_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_cam_video_methods[] = {
  { (GCallback) cam_video_get, dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER, 0 },
  { (GCallback) cam_video_set, dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER, 61 },
  { (GCallback) cam_video_describe, dbus_glib_marshal_cam_video_BOOLEAN__POINTER_POINTER, 124 },
  { (GCallback) cam_video_status, dbus_glib_marshal_cam_video_BOOLEAN__POINTER_POINTER, 179 },
  { (GCallback) cam_video_flush, dbus_glib_marshal_cam_video_BOOLEAN__POINTER_POINTER, 232 },
  { (GCallback) cam_video_configure, dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER, 286 },
  { (GCallback) cam_video_playback, dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER, 357 },
  { (GCallback) cam_video_livedisplay, dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER, 425 },
  { (GCallback) cam_video_recordfile, dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER, 496 },
  { (GCallback) cam_video_liverecord, dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER, 572 },
  { (GCallback) cam_video_pause, dbus_glib_marshal_cam_video_BOOLEAN__POINTER_POINTER, 648 },
  { (GCallback) cam_video_stop, dbus_glib_marshal_cam_video_BOOLEAN__POINTER_POINTER, 702 },
  { (GCallback) cam_video_overlay, dbus_glib_marshal_cam_video_BOOLEAN__BOXED_POINTER_POINTER, 755 },
};

const DBusGObjectInfo dbus_glib_cam_video_object_info = {  1,
  dbus_glib_cam_video_methods,
  13,
"ca.krontech.chronos.video\0get\0S\0names\0I\0as\0data\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0set\0S\0args\0I\0a{sv}\0data\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0describe\0S\0data\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0status\0S\0data\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0flush\0S\0status\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0configure\0S\0args\0I\0a{sv}\0status\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0playback\0S\0args\0I\0a{sv}\0data\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0livedisplay\0S\0args\0I\0a{sv}\0data\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0recordfile\0S\0settings\0I\0a{sv}\0status\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0liverecord\0S\0settings\0I\0a{sv}\0status\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0pause\0S\0status\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0stop\0S\0status\0O\0F\0N\0a{sv}\0\0ca.krontech.chronos.video\0overlay\0S\0settings\0I\0a{sv}\0status\0O\0F\0N\0a{sv}\0\0\0",
"ca.krontech.chronos.video\0sof\0ca.krontech.chronos.video\0eof\0ca.krontech.chronos.video\0segment\0ca.krontech.chronos.video\0update\0\0",
"\0"
};

